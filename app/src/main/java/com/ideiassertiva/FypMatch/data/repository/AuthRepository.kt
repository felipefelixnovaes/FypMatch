package com.ideiassertiva.FypMatch.data.repository

import android.content.Context
import android.content.Intent
import androidx.credentials.CredentialManager
import androidx.credentials.GetCredentialRequest
import androidx.credentials.GetCredentialResponse
import androidx.credentials.exceptions.GetCredentialException
import com.google.android.libraries.identity.googleid.GetGoogleIdOption
import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential
import com.google.android.libraries.identity.googleid.GoogleIdTokenParsingException
import com.ideiassertiva.FypMatch.model.User
import com.ideiassertiva.FypMatch.model.AccessLevel
import com.ideiassertiva.FypMatch.model.BetaFlags
import com.ideiassertiva.FypMatch.model.UserProfile
import com.ideiassertiva.FypMatch.model.Gender
import com.ideiassertiva.FypMatch.model.Location
import com.ideiassertiva.FypMatch.model.isProfileComplete
import com.ideiassertiva.FypMatch.util.AnalyticsManager
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.auth.EmailAuthProvider
import com.google.firebase.auth.PhoneAuthProvider
import com.google.firebase.auth.PhoneAuthCredential
import com.google.firebase.auth.PhoneAuthOptions
import com.google.firebase.auth.AuthResult
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import java.util.Date
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import javax.inject.Singleton
import dagger.hilt.android.qualifiers.ApplicationContext
import android.os.Build
import android.app.Activity
import com.ideiassertiva.FypMatch.BuildConfig

// Enum para tipos de login
enum class LoginType {
    GOOGLE,
    EMAIL,
    PHONE
}

// Data class para credenciais de email
data class EmailCredentials(
    val email: String,
    val password: String
)

// Data class para credenciais de telefone
data class PhoneCredentials(
    val phoneNumber: String,
    val verificationCode: String
)

// Estados para verifica√ß√£o de email
sealed class EmailVerificationState {
    object Idle : EmailVerificationState()
    object SendingCode : EmailVerificationState()
    object CodeSent : EmailVerificationState()
    object Verified : EmailVerificationState()
    data class Error(val message: String) : EmailVerificationState()
}

@Singleton
class AuthRepository @Inject constructor(
    @ApplicationContext private val context: Context,
    private val analyticsManager: AnalyticsManager,
    private val userRepository: UserRepository,
    private val locationRepository: LocationRepository,
    private val accessControlRepository: AccessControlRepository
) {
    
    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
    private val credentialManager = CredentialManager.create(context)
    
    // Estados observ√°veis
    private val _currentUser = MutableStateFlow<User?>(null)
    val currentUser: Flow<User?> = _currentUser.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: Flow<Boolean> = _isLoading.asStateFlow()
    
    private val _navigationState = MutableStateFlow<NavigationState>(NavigationState.None)
    val navigationState: Flow<NavigationState> = _navigationState.asStateFlow()
    
    private val _needsInteractiveSignIn = MutableStateFlow(false)
    val needsInteractiveSignIn: Flow<Boolean> = _needsInteractiveSignIn.asStateFlow()
    
    // Estado para verifica√ß√£o de telefone
    private val _phoneVerificationState = MutableStateFlow<PhoneVerificationState>(PhoneVerificationState.Idle)
    val phoneVerificationState: Flow<PhoneVerificationState> = _phoneVerificationState.asStateFlow()
    
    // Estado para verifica√ß√£o de email
    private val _emailVerificationState = MutableStateFlow<EmailVerificationState>(EmailVerificationState.Idle)
    val emailVerificationState: Flow<EmailVerificationState> = _emailVerificationState.asStateFlow()
    
    // Vari√°veis para verifica√ß√£o de telefone
    private var storedVerificationId: String? = null
    private var resendToken: PhoneAuthProvider.ForceResendingToken? = null
    
    // Vari√°veis para verifica√ß√£o de email
    private var pendingEmailUser: FirebaseUser? = null
    private var pendingUserData: User? = null
    
    init {
        // Observar mudan√ßas no estado de autentica√ß√£o
        auth.addAuthStateListener { firebaseAuth ->
            val firebaseUser = firebaseAuth.currentUser
            if (firebaseUser != null) {
                loadUserData(firebaseUser)
            } else {
                _currentUser.value = null
            }
        }
    }
    
    // === M√âTODOS DE LOGIN COM GOOGLE ===
    
    // M√©todo principal de login com Google usando nova API Credentials
    suspend fun signInWithGoogle(): Result<User> {
        return try {
            _isLoading.value = true
            _needsInteractiveSignIn.value = false
            
            println("üîç DEBUG - Iniciando login com Google via Credentials API")
            
            val result = tryCredentialManagerSignIn()
            
            result.fold(
                onSuccess = { user ->
                    println("üîç DEBUG - Login bem-sucedido: ${user.email}")
                    _isLoading.value = false
                    Result.success(user)
                },
                onFailure = { error ->
                    println("üîç DEBUG - Erro no login: ${error.message}")
                    
                    // Se for erro que requer intera√ß√£o, ativar fluxo interativo
                    if (error.message?.contains("No credentials available", ignoreCase = true) == true ||
                        error.message?.contains("SIGN_IN_REQUIRED", ignoreCase = true) == true) {
                        
                        println("üîç DEBUG - Ativando fluxo interativo")
                        _needsInteractiveSignIn.value = true
                        _isLoading.value = false
                        Result.failure(GoogleSignInInteractiveRequiredException("INTERACTIVE_SIGNIN_REQUIRED"))
                    } else {
                        // Tentar m√©todo alternativo como √∫ltimo recurso
                        println("üîç DEBUG - Tentando m√©todo alternativo...")
                        tryAlternativeGoogleSignIn()
                    }
                }
            )
        } catch (e: Exception) {
            println("üîç DEBUG - Erro geral no signInWithGoogle: ${e.message}")
            _isLoading.value = false
            Result.failure(e)
        }
    }
    
    // === M√âTODOS DE LOGIN COM EMAIL ===
    
    // Login com email e senha
    suspend fun signInWithEmail(email: String, password: String): Result<User> {
        return try {
            _isLoading.value = true
            
            println("üîç DEBUG - Iniciando login com email: $email")
            
            val authResult = auth.signInWithEmailAndPassword(email, password).await()
            val firebaseUser = authResult.user
            
            if (firebaseUser != null) {
                // Verificar se o email foi verificado
                if (!firebaseUser.isEmailVerified) {
                    _isLoading.value = false
                    return Result.failure(Exception("Email n√£o verificado. Verifique sua caixa de entrada e clique no link de verifica√ß√£o."))
                }
                
                val user = processSignInResult(firebaseUser, LoginType.EMAIL)
                
                analyticsManager.logCustomCrash("email_signin_success", mapOf(
                    "user_id" to user.id,
                    "email" to email
                ))
                
                _isLoading.value = false
                Result.success(user)
            } else {
                _isLoading.value = false
                Result.failure(Exception("Falha na autentica√ß√£o com email"))
            }
        } catch (e: Exception) {
            println("üîç DEBUG - Erro no login com email: ${e.message}")
            _isLoading.value = false
            
            analyticsManager.logError(e, "email_signin_failure")
            
            val errorMessage = when {
                e.message?.contains("password is invalid", ignoreCase = true) == true -> 
                    "Senha incorreta"
                e.message?.contains("no user record", ignoreCase = true) == true -> 
                    "Email n√£o encontrado"
                e.message?.contains("badly formatted", ignoreCase = true) == true -> 
                    "Email inv√°lido"
                e.message?.contains("too many requests", ignoreCase = true) == true -> 
                    "Muitas tentativas. Tente novamente mais tarde"
                else -> "Erro no login: ${e.message}"
            }
            
            Result.failure(Exception(errorMessage))
        }
    }
    
    // Criar conta com email e senha (com verifica√ß√£o)
    suspend fun signUpWithEmail(email: String, password: String): Result<String> {
        return try {
            _isLoading.value = true
            _emailVerificationState.value = EmailVerificationState.SendingCode
            
            println("üîç DEBUG - Criando conta com email: $email")
            
            // Verificar se j√° existe usu√°rio com este email
            val duplicateCheck = checkForDuplicateUser(email, null)
            duplicateCheck.getOrNull()?.let { existingUser ->
                _isLoading.value = false
                _emailVerificationState.value = EmailVerificationState.Error("Email j√° est√° em uso")
                return Result.failure(Exception("J√° existe uma conta com este email: ${existingUser.email}"))
            }
            
            val authResult = auth.createUserWithEmailAndPassword(email, password).await()
            val firebaseUser = authResult.user
            
            if (firebaseUser != null) {
                // Criar dados do usu√°rio mas n√£o salvar ainda
                val userId = generateUserId(firebaseUser, LoginType.EMAIL)
                val newUser = createNewUser(userId, email, firebaseUser.displayName ?: "", "")
                
                // Armazenar dados temporariamente
                pendingEmailUser = firebaseUser
                pendingUserData = newUser
                
                // Enviar email de verifica√ß√£o
                firebaseUser.sendEmailVerification().await()
                
                analyticsManager.logCustomCrash("email_signup_verification_sent", mapOf(
                    "user_id" to newUser.id,
                    "email" to email
                ))
                
                _emailVerificationState.value = EmailVerificationState.CodeSent
                _isLoading.value = false
                
                Result.success("Email de verifica√ß√£o enviado para $email. Verifique sua caixa de entrada.")
            } else {
                _isLoading.value = false
                _emailVerificationState.value = EmailVerificationState.Error("Falha na cria√ß√£o da conta")
                Result.failure(Exception("Falha na cria√ß√£o da conta"))
            }
        } catch (e: Exception) {
            println("üîç DEBUG - Erro na cria√ß√£o da conta: ${e.message}")
            _isLoading.value = false
            _emailVerificationState.value = EmailVerificationState.Error(e.message ?: "Erro na cria√ß√£o da conta")
            
            analyticsManager.logError(e, "email_signup_failure")
            
            val errorMessage = when {
                e.message?.contains("email address is already in use", ignoreCase = true) == true -> 
                    "Este email j√° est√° em uso"
                e.message?.contains("password is too weak", ignoreCase = true) == true -> 
                    "Senha muito fraca. Use pelo menos 6 caracteres"
                e.message?.contains("badly formatted", ignoreCase = true) == true -> 
                    "Email inv√°lido"
                e.message?.contains("network error", ignoreCase = true) == true -> 
                    "Erro de conex√£o. Verifique sua internet"
                else -> "Erro na cria√ß√£o da conta: ${e.message}"
            }
            
            Result.failure(Exception(errorMessage))
        }
    }
    
    // Verificar se o email foi confirmado
    suspend fun checkEmailVerification(): Result<User> {
        return try {
            _isLoading.value = true
            
            val firebaseUser = pendingEmailUser ?: auth.currentUser
            if (firebaseUser == null) {
                _isLoading.value = false
                return Result.failure(Exception("Usu√°rio n√£o encontrado"))
            }
            
            // Recarregar dados do usu√°rio para verificar status
            firebaseUser.reload().await()
            
            if (firebaseUser.isEmailVerified) {
                // Email verificado - criar usu√°rio no Firestore
                val userData = pendingUserData ?: createNewUser(
                    generateUserId(firebaseUser, LoginType.EMAIL),
                    firebaseUser.email ?: "",
                    firebaseUser.displayName ?: "",
                    ""
                )
                
                val savedUser = userRepository.createUserInFirestore(userData).getOrThrow()
                
                // Limpar dados tempor√°rios
                pendingEmailUser = null
                pendingUserData = null
                
                _currentUser.value = savedUser
                _emailVerificationState.value = EmailVerificationState.Verified
                _isLoading.value = false
                
                analyticsManager.logCustomCrash("email_signup_success", mapOf(
                    "user_id" to savedUser.id,
                    "email" to savedUser.email
                ))
                
                Result.success(savedUser)
            } else {
                _isLoading.value = false
                Result.failure(Exception("Email ainda n√£o foi verificado. Verifique sua caixa de entrada."))
            }
        } catch (e: Exception) {
            println("üîç DEBUG - Erro na verifica√ß√£o do email: ${e.message}")
            _isLoading.value = false
            _emailVerificationState.value = EmailVerificationState.Error("Erro na verifica√ß√£o")
            
            analyticsManager.logError(e, "email_verification_check_failed")
            Result.failure(Exception("Erro ao verificar email: ${e.message}"))
        }
    }
    
    // Reenviar email de verifica√ß√£o
    suspend fun resendEmailVerification(): Result<String> {
        return try {
            _isLoading.value = true
            
            val firebaseUser = pendingEmailUser ?: auth.currentUser
            if (firebaseUser == null) {
                _isLoading.value = false
                return Result.failure(Exception("Usu√°rio n√£o encontrado"))
            }
            
            firebaseUser.sendEmailVerification().await()
            
            _isLoading.value = false
            
            analyticsManager.logCustomCrash("email_verification_resent", mapOf(
                "email" to (firebaseUser.email ?: "unknown")
            ))
            
            Result.success("Email de verifica√ß√£o reenviado para ${firebaseUser.email}")
        } catch (e: Exception) {
            println("üîç DEBUG - Erro ao reenviar email: ${e.message}")
            _isLoading.value = false
            
            analyticsManager.logError(e, "email_verification_resend_failed")
            
            val errorMessage = when {
                e.message?.contains("too many requests", ignoreCase = true) == true -> 
                    "Muitas tentativas. Aguarde alguns minutos antes de tentar novamente"
                e.message?.contains("network error", ignoreCase = true) == true -> 
                    "Erro de conex√£o. Verifique sua internet"
                else -> "Erro ao reenviar email: ${e.message}"
            }
            
            Result.failure(Exception(errorMessage))
        }
    }
    
    // Limpar estado de verifica√ß√£o de email
    fun clearEmailVerificationState() {
        _emailVerificationState.value = EmailVerificationState.Idle
        pendingEmailUser = null
        pendingUserData = null
    }
    
    // === M√âTODOS DE LOGIN COM TELEFONE ===
    
    // Iniciar verifica√ß√£o de telefone
    suspend fun startPhoneVerification(phoneNumber: String, activity: Activity): Result<String> {
        return try {
            _isLoading.value = true
            _phoneVerificationState.value = PhoneVerificationState.SendingCode
            
            println("üîç DEBUG - Iniciando verifica√ß√£o de telefone: $phoneNumber")
            
            val options = PhoneAuthOptions.newBuilder(auth)
                .setPhoneNumber(phoneNumber)
                .setTimeout(60L, TimeUnit.SECONDS)
                .setActivity(activity)
                .setCallbacks(object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                    override fun onVerificationCompleted(credential: PhoneAuthCredential) {
                        println("üîç DEBUG - Verifica√ß√£o autom√°tica completada")
                        _phoneVerificationState.value = PhoneVerificationState.AutoVerified(credential)
                        _isLoading.value = false
                    }
                    
                    override fun onVerificationFailed(e: com.google.firebase.FirebaseException) {
                        println("üîç DEBUG - Falha na verifica√ß√£o: ${e.message}")
                        _phoneVerificationState.value = PhoneVerificationState.Error(e.message ?: "Erro na verifica√ß√£o")
                        _isLoading.value = false
                        
                        analyticsManager.logError(e, "phone_verification_failed")
                    }
                    
                    override fun onCodeSent(verificationId: String, token: PhoneAuthProvider.ForceResendingToken) {
                        println("üîç DEBUG - C√≥digo enviado. ID: $verificationId")
                        storedVerificationId = verificationId
                        resendToken = token
                        _phoneVerificationState.value = PhoneVerificationState.CodeSent
                        _isLoading.value = false
                    }
                })
                .build()
            
            PhoneAuthProvider.verifyPhoneNumber(options)
            
            Result.success("C√≥digo de verifica√ß√£o enviado")
        } catch (e: Exception) {
            println("üîç DEBUG - Erro ao iniciar verifica√ß√£o: ${e.message}")
            _isLoading.value = false
            _phoneVerificationState.value = PhoneVerificationState.Error(e.message ?: "Erro desconhecido")
            
            analyticsManager.logError(e, "phone_verification_start_failed")
            Result.failure(e)
        }
    }
    
    // Verificar c√≥digo de telefone
    suspend fun verifyPhoneCode(code: String): Result<User> {
        return try {
            _isLoading.value = true
            
            val verificationId = storedVerificationId 
                ?: return Result.failure(Exception("ID de verifica√ß√£o n√£o encontrado"))
            
            println("üîç DEBUG - Verificando c√≥digo: $code")
            
            val credential = PhoneAuthProvider.getCredential(verificationId, code)
            val authResult = auth.signInWithCredential(credential).await()
            val firebaseUser = authResult.user
            
            if (firebaseUser != null) {
                val user = processSignInResult(firebaseUser, LoginType.PHONE)
                
                analyticsManager.logCustomCrash("phone_signin_success", mapOf(
                    "user_id" to user.id,
                    "phone" to (firebaseUser.phoneNumber ?: "unknown")
                ))
                
                _phoneVerificationState.value = PhoneVerificationState.Verified
                _isLoading.value = false
                Result.success(user)
            } else {
                _isLoading.value = false
                Result.failure(Exception("Falha na autentica√ß√£o"))
            }
        } catch (e: Exception) {
            println("üîç DEBUG - Erro na verifica√ß√£o do c√≥digo: ${e.message}")
            _isLoading.value = false
            _phoneVerificationState.value = PhoneVerificationState.Error("C√≥digo inv√°lido")
            
            analyticsManager.logError(e, "phone_code_verification_failed")
            
            val errorMessage = when {
                e.message?.contains("invalid verification code", ignoreCase = true) == true -> 
                    "C√≥digo de verifica√ß√£o inv√°lido"
                e.message?.contains("expired", ignoreCase = true) == true -> 
                    "C√≥digo expirado. Solicite um novo c√≥digo"
                else -> "Erro na verifica√ß√£o: ${e.message}"
            }
            
            Result.failure(Exception(errorMessage))
        }
    }
    
    // Reenviar c√≥digo de verifica√ß√£o
    suspend fun resendPhoneCode(phoneNumber: String, activity: Activity): Result<String> {
        return try {
            _isLoading.value = true
            
            val token = resendToken 
                ?: return startPhoneVerification(phoneNumber, activity)
            
            println("üîç DEBUG - Reenviando c√≥digo para: $phoneNumber")
            
            val options = PhoneAuthOptions.newBuilder(auth)
                .setPhoneNumber(phoneNumber)
                .setTimeout(60L, TimeUnit.SECONDS)
                .setActivity(activity)
                .setForceResendingToken(token)
                .setCallbacks(object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
                    override fun onVerificationCompleted(credential: PhoneAuthCredential) {
                        _phoneVerificationState.value = PhoneVerificationState.AutoVerified(credential)
                        _isLoading.value = false
                    }
                    
                    override fun onVerificationFailed(e: com.google.firebase.FirebaseException) {
                        _phoneVerificationState.value = PhoneVerificationState.Error(e.message ?: "Erro no reenvio")
                        _isLoading.value = false
                    }
                    
                    override fun onCodeSent(verificationId: String, token: PhoneAuthProvider.ForceResendingToken) {
                        storedVerificationId = verificationId
                        resendToken = token
                        _phoneVerificationState.value = PhoneVerificationState.CodeSent
                        _isLoading.value = false
                    }
                })
                .build()
            
            PhoneAuthProvider.verifyPhoneNumber(options)
            
            Result.success("C√≥digo reenviado")
        } catch (e: Exception) {
            println("üîç DEBUG - Erro ao reenviar c√≥digo: ${e.message}")
            _isLoading.value = false
            _phoneVerificationState.value = PhoneVerificationState.Error(e.message ?: "Erro no reenvio")
            
            analyticsManager.logError(e, "phone_code_resend_failed")
            Result.failure(e)
        }
    }
    
    // === M√âTODOS AUXILIARES ===
    
    // Processar resultado de login e criar/atualizar usu√°rio
    private suspend fun processSignInResult(firebaseUser: FirebaseUser, loginType: LoginType): User {
        val email = firebaseUser.email ?: ""
        val phoneNumber = firebaseUser.phoneNumber ?: ""
        val displayName = firebaseUser.displayName ?: ""
        val photoUrl = firebaseUser.photoUrl?.toString() ?: ""
        
        println("üîç DEBUG - Processando login para: email=$email, phone=$phoneNumber, loginType=$loginType")
        
        // PRIORIDADE 1: Buscar por email/telefone usando m√©todo direto (mais eficiente)
        val directSearchResult = userRepository.findUserByEmailOrPhone(
            email.takeIf { it.isNotBlank() },
            phoneNumber.takeIf { it.isNotBlank() }
        )
        directSearchResult.getOrNull()?.let { existingUser ->
            println("üîç DEBUG - ‚úÖ USU√ÅRIO EXISTENTE ENCONTRADO (busca direta): ${existingUser.id}")
            println("üîç DEBUG - Email: ${existingUser.email}, Perfil completo: ${existingUser.isProfileComplete()}")
            
            // Atualizar dados do usu√°rio existente com informa√ß√µes mais recentes
            val updatedUser = existingUser.copy(
                email = email.ifEmpty { existingUser.email },
                displayName = displayName.ifEmpty { existingUser.displayName },
                photoUrl = photoUrl.ifEmpty { existingUser.photoUrl },
                lastActive = Date()
            )
            
            userRepository.updateUserInFirestore(updatedUser).getOrThrow()
            _currentUser.value = updatedUser
            
            // Configurar navega√ß√£o baseada no estado do perfil
            _navigationState.value = when {
                !updatedUser.isProfileComplete() -> {
                    println("üîç DEBUG - Navegando para completar perfil")
                    NavigationState.ToProfile
                }
                updatedUser.profile.photos.isEmpty() -> {
                    println("üîç DEBUG - Navegando para upload de fotos")
                    NavigationState.ToPhotoUpload
                }
                else -> {
                    println("üîç DEBUG - Navegando para descoberta")
                    NavigationState.ToDiscovery
                }
            }
            
            return updatedUser
        }
        
        // PRIORIDADE 2: Buscar por padr√£o de email/telefone (para IDs antigos)
        val patternSearchResult = checkForDuplicateUser(
            email.takeIf { it.isNotBlank() },
            phoneNumber.takeIf { it.isNotBlank() }
        )
        patternSearchResult.getOrNull()?.let { existingUser ->
            println("üîç DEBUG - ‚úÖ USU√ÅRIO EXISTENTE ENCONTRADO (busca por padr√£o): ${existingUser.id}")
            
            // Atualizar usu√°rio existente
            val updatedUser = existingUser.copy(
                email = email.ifEmpty { existingUser.email },
                displayName = displayName.ifEmpty { existingUser.displayName },
                photoUrl = photoUrl.ifEmpty { existingUser.photoUrl },
                lastActive = Date()
            )
            
            userRepository.updateUserInFirestore(updatedUser).getOrThrow()
            _currentUser.value = updatedUser
            
            // Configurar navega√ß√£o baseada no estado do perfil
            _navigationState.value = when {
                !updatedUser.isProfileComplete() -> NavigationState.ToProfile
                updatedUser.profile.photos.isEmpty() -> NavigationState.ToPhotoUpload
                else -> NavigationState.ToDiscovery
            }
            
            return updatedUser
        }
        
        // PRIORIDADE 3: Gerar novo userId e verificar se existe
        val userId = generateUserId(firebaseUser, loginType)
        println("üîç DEBUG - Gerando novo userId: $userId")
        
        val existingUserResult = userRepository.getUserFromFirestore(userId)
        
        return existingUserResult.fold(
            onSuccess = { existingUser ->
                if (existingUser != null) {
                    println("üîç DEBUG - ‚úÖ USU√ÅRIO EXISTENTE ENCONTRADO (por ID): ${existingUser.id}")
                    
                    // Atualizar informa√ß√µes do usu√°rio existente
                    val updatedUser = existingUser.copy(
                        email = email.ifEmpty { existingUser.email },
                        displayName = displayName.ifEmpty { existingUser.displayName },
                        photoUrl = photoUrl.ifEmpty { existingUser.photoUrl },
                        lastActive = Date()
                    )
                    
                    userRepository.updateUserInFirestore(updatedUser).getOrThrow()
                    _currentUser.value = updatedUser
                    
                    // Configurar navega√ß√£o baseada no estado do perfil
                    _navigationState.value = when {
                        !updatedUser.isProfileComplete() -> NavigationState.ToProfile
                        updatedUser.profile.photos.isEmpty() -> NavigationState.ToPhotoUpload
                        else -> NavigationState.ToDiscovery
                    }
                    
                    updatedUser
                } else {
                    println("üîç DEBUG - ‚ùå NENHUM USU√ÅRIO ENCONTRADO - Criando novo usu√°rio")
                    
                    // Criar novo usu√°rio
                    val newUser = createNewUser(userId, email, displayName, photoUrl)
                    userRepository.createUserInFirestore(newUser).getOrThrow()
                    _currentUser.value = newUser
                    
                    // Novo usu√°rio sempre vai para completar perfil
                    _navigationState.value = NavigationState.ToProfile
                    
                    newUser
                }
            },
            onFailure = { error ->
                println("üîç DEBUG - ‚ùå ERRO ao buscar usu√°rio: ${error.message} - Criando novo")
                
                // Erro ao buscar usu√°rio, criar novo
                val newUser = createNewUser(userId, email, displayName, photoUrl)
                userRepository.createUserInFirestore(newUser).getOrThrow()
                _currentUser.value = newUser
                
                // Novo usu√°rio sempre vai para completar perfil
                _navigationState.value = NavigationState.ToProfile
                
                newUser
            }
        )
    }
    
    // Criar novo usu√°rio com dados b√°sicos
    private suspend fun createNewUser(userId: String, email: String, displayName: String, photoUrl: String): User {
        val (accessLevel, betaFlags) = accessControlRepository.getSpecialAccessConfig(email)
        
        return User(
            id = userId,
            email = email,
            displayName = displayName,
            photoUrl = photoUrl,
            profile = UserProfile(
                fullName = displayName,
                age = 18,
                bio = "",
                photos = if (photoUrl.isNotEmpty()) listOf(photoUrl) else emptyList(),
                location = Location(
                    country = "Brasil"
                ),
                gender = Gender.NOT_SPECIFIED,
                isProfileComplete = false
            ),
            accessLevel = accessLevel,
            betaFlags = betaFlags,
            createdAt = Date(),
            lastActive = Date()
        )
    }
    
    // Gerar ID √∫nico baseado no tipo de login + GUID para garantir unicidade
    private fun generateUserId(firebaseUser: FirebaseUser, loginType: LoginType): String {
        val baseId = when (loginType) {
            LoginType.GOOGLE, LoginType.EMAIL -> {
                // Para Google/Email, usar email normalizado
                firebaseUser.email?.lowercase()?.replace(".", "_")?.replace("@", "_at_") 
                    ?: "unknown_email"
            }
            LoginType.PHONE -> {
                // Para telefone, usar n√∫mero normalizado
                firebaseUser.phoneNumber?.replace("+", "")?.replace(" ", "")?.replace("-", "")?.replace("(", "")?.replace(")", "")
                    ?: "unknown_phone"
            }
        }
        
        // Sempre usar o Firebase UID como sufixo para garantir unicidade absoluta
        return "${baseId}_${firebaseUser.uid}"
    }
    
    // Verificar se j√° existe usu√°rio com mesmo email ou telefone
    private suspend fun checkForDuplicateUser(email: String?, phoneNumber: String?): Result<User?> {
        return try {
            // Buscar por email se fornecido
            if (!email.isNullOrBlank()) {
                val emailPattern = email.lowercase().replace(".", "_").replace("@", "_at_")
                val emailResult = userRepository.findUserByEmailPattern(emailPattern)
                emailResult.getOrNull()?.let { existingUser ->
                    println("üîç DEBUG - Usu√°rio encontrado com email similar: ${existingUser.id}")
                    return Result.success(existingUser)
                }
            }
            
            // Buscar por telefone se fornecido
            if (!phoneNumber.isNullOrBlank()) {
                val phonePattern = phoneNumber.replace("+", "").replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
                val phoneResult = userRepository.findUserByPhonePattern(phonePattern)
                phoneResult.getOrNull()?.let { existingUser ->
                    println("üîç DEBUG - Usu√°rio encontrado com telefone similar: ${existingUser.id}")
                    return Result.success(existingUser)
                }
            }
            
            // Nenhum usu√°rio duplicado encontrado
            Result.success(null)
        } catch (e: Exception) {
            println("üîç DEBUG - Erro ao verificar duplicatas: ${e.message}")
            // Em caso de erro, permitir cria√ß√£o (melhor que bloquear)
            Result.success(null)
        }
    }
    
    // Limpar estado de verifica√ß√£o de telefone
    fun clearPhoneVerificationState() {
        _phoneVerificationState.value = PhoneVerificationState.Idle
        storedVerificationId = null
        resendToken = null
    }
    
    // Configurar modo de teste para verifica√ß√£o de telefone (apenas para desenvolvimento)
    fun enablePhoneTestMode() {
        if (BuildConfig.DEBUG) {
            println("üîç DEBUG - Modo de teste de telefone habilitado")
            println("üîç DEBUG - Configure n√∫meros de teste no Firebase Console")
            println("üîç DEBUG - Exemplo: +55 11 99999-9999 -> c√≥digo 123456")
        }
    }
    
    private suspend fun tryCredentialManagerSignIn(): Result<User> {
        return try {
            println("üîç DEBUG - Iniciando Credential Manager Sign-In")
            
            val webClientId = "98859676437-chnsb65d35smaed10idl756aunqmsap2.apps.googleusercontent.com"
            
            val googleIdOption = GetGoogleIdOption.Builder()
                .setFilterByAuthorizedAccounts(false)
                .setServerClientId(webClientId)
                .setAutoSelectEnabled(false)
                .build()
            
            val request = GetCredentialRequest.Builder()
                .addCredentialOption(googleIdOption)
                .build()
            
            println("üîç DEBUG - Fazendo requisi√ß√£o de credencial...")
            
            val result = credentialManager.getCredential(
                request = request,
                context = context
            )
            
            println("üîç DEBUG - Credencial obtida com sucesso")
            
            // Processar resultado
            return handleSignInResult(result)
            
        } catch (e: GetCredentialException) {
            println("üîç DEBUG - GetCredentialException: ${e.javaClass.simpleName} - ${e.message}")
            analyticsManager.logError(e, "google_signin_credential_error")
            
            val errorMessage = when (e) {
                is androidx.credentials.exceptions.GetCredentialCancellationException -> {
                    println("üîç DEBUG - Login cancelado pelo usu√°rio")
                    "Login cancelado pelo usu√°rio"
                }
                is androidx.credentials.exceptions.NoCredentialException -> {
                    println("üîç DEBUG - Nenhuma credencial encontrada")
                    "Nenhuma conta Google encontrada. Verifique se h√° uma conta Google configurada no dispositivo."
                }
                else -> {
                    println("üîç DEBUG - Outro erro de credencial: ${e.javaClass.simpleName}")
                    "Erro no login Google: ${e.message}"
                }
            }
            
            Result.failure(Exception(errorMessage))
        } catch (e: GoogleSignInInteractiveRequiredException) {
            println("üîç DEBUG - Fluxo interativo necess√°rio")
            Result.failure(e)
        } catch (e: Exception) {
            println("üîç DEBUG - Exception geral: ${e.javaClass.simpleName} - ${e.message}")
            analyticsManager.logError(e, "google_signin_general_error")
            Result.failure(e)
        }
    }
    
    private suspend fun handleSignInResult(result: GetCredentialResponse): Result<User> {
        return try {
            // Extrair credencial do Google ID Token
            val credential = result.credential
            
            if (credential is GoogleIdTokenCredential) {
                val googleIdToken = credential.idToken
                
                // Autenticar com Firebase
                val firebaseCredential = GoogleAuthProvider.getCredential(googleIdToken, null)
                val authResult = auth.signInWithCredential(firebaseCredential).await()
                val firebaseUser = authResult.user
                
                if (firebaseUser != null) {
                    try {
                        // Criar ou atualizar usu√°rio com dados do Google
                        val user = createOrUpdateUserWithGoogleData(firebaseUser, credential)
                        _currentUser.value = user
                        
                        // Configurar status online no Realtime Database
                        locationRepository.setUserOnline(user.id)
                        
                        // Analytics: Login bem-sucedido
                        analyticsManager.setUserId(user.id)
                        analyticsManager.setUserProperties(mapOf(
                            "login_method" to "google",
                            "has_google_photo" to (credential.profilePictureUri != null).toString(),
                            "google_email_domain" to (credential.id.substringAfter("@"))
                        ))
                        
                        // Determinar navega√ß√£o baseada no estado do perfil
                        _navigationState.value = when {
                            !user.isProfileComplete() -> NavigationState.ToProfile
                            user.profile.photos.isEmpty() -> NavigationState.ToPhotoUpload
                            else -> NavigationState.ToDiscovery
                        }
                        
                        Result.success(user)
                    
                    } catch (firestoreError: Exception) {
                        // Se Firestore falhar, criar usu√°rio m√≠nimo
                        val minimalUser = createMinimalUserFromGoogle(firebaseUser, credential)
                        _currentUser.value = minimalUser
                        _navigationState.value = NavigationState.ToProfile
                        
                        // Analytics: Fallback login
                        analyticsManager.logError(firestoreError, "google_login_firestore_fallback")
                        
                        Result.success(minimalUser)
                    }
                } else {
                    analyticsManager.logError(Exception("Firebase auth failed"), "google_login_firebase_null")
                    Result.failure(Exception("Falha na autentica√ß√£o"))
                }
            } else {
                Result.failure(Exception("Credencial inv√°lida"))
            }
        } catch (e: GoogleIdTokenParsingException) {
            analyticsManager.logError(e, "google_token_parsing_error")
            Result.failure(Exception("Erro ao processar token do Google"))
        }
    }
    
    private suspend fun createOrUpdateUserWithGoogleData(
        firebaseUser: FirebaseUser, 
        googleCredential: GoogleIdTokenCredential
    ): User {
        val email = firebaseUser.email ?: ""
        
        println("üîç DEBUG - Login Google para: $email")
        
        // PRIORIDADE 1: Buscar por email usando m√©todo direto (mais eficiente)
        val directSearchResult = userRepository.findUserByEmailOrPhone(email.takeIf { it.isNotBlank() }, null)
        directSearchResult.getOrNull()?.let { existingUser ->
            println("üîç DEBUG - ‚úÖ USU√ÅRIO GOOGLE EXISTENTE ENCONTRADO (busca direta): ${existingUser.id}")
            
            // Atualizar usu√°rio existente com dados do Google
            val updatedUser = existingUser.copy(
                email = email.ifEmpty { existingUser.email },
                displayName = firebaseUser.displayName ?: existingUser.displayName,
                photoUrl = firebaseUser.photoUrl?.toString() ?: existingUser.photoUrl,
                lastActive = Date(),
                profile = existingUser.profile.copy(
                    fullName = if (existingUser.profile.fullName.isBlank()) {
                        firebaseUser.displayName ?: ""
                    } else existingUser.profile.fullName,
                    // Atualizar foto do perfil se n√£o tiver
                    photos = if (existingUser.profile.photos.isEmpty() && firebaseUser.photoUrl != null) {
                        listOf(firebaseUser.photoUrl.toString())
                    } else existingUser.profile.photos
                )
            )
            
            return userRepository.updateUserInFirestore(updatedUser).getOrThrow()
        }
        
        // PRIORIDADE 2: Buscar por padr√£o de email (para IDs antigos)
        val patternSearchResult = checkForDuplicateUser(email.takeIf { it.isNotBlank() }, null)
        patternSearchResult.getOrNull()?.let { existingUser ->
            println("üîç DEBUG - ‚úÖ USU√ÅRIO GOOGLE EXISTENTE ENCONTRADO (busca por padr√£o): ${existingUser.id}")
            
            // Atualizar usu√°rio existente com dados do Google
            val updatedUser = existingUser.copy(
                email = email.ifEmpty { existingUser.email },
                displayName = firebaseUser.displayName ?: existingUser.displayName,
                photoUrl = firebaseUser.photoUrl?.toString() ?: existingUser.photoUrl,
                lastActive = Date(),
                profile = existingUser.profile.copy(
                    fullName = if (existingUser.profile.fullName.isBlank()) {
                        firebaseUser.displayName ?: ""
                    } else existingUser.profile.fullName,
                    photos = if (existingUser.profile.photos.isEmpty() && firebaseUser.photoUrl != null) {
                        listOf(firebaseUser.photoUrl.toString())
                    } else existingUser.profile.photos
                )
            )
            
            return userRepository.updateUserInFirestore(updatedUser).getOrThrow()
        }
        
        // PRIORIDADE 3: Gerar novo userId e verificar se existe
        val userId = generateUserId(firebaseUser, LoginType.GOOGLE)
        println("üîç DEBUG - Gerando novo userId Google: $userId")
        
        val existingUserResult = userRepository.getUserFromFirestore(userId)
        
        return existingUserResult.fold(
            onSuccess = { existingUser ->
                if (existingUser != null) {
                    println("üîç DEBUG - ‚úÖ USU√ÅRIO GOOGLE EXISTENTE ENCONTRADO (por ID): ${existingUser.id}")
                    
                    // Usu√°rio existente - atualizar com novos dados do Google se necess√°rio
                    val updatedUser = existingUser.copy(
                        email = email.ifEmpty { existingUser.email },
                        displayName = firebaseUser.displayName ?: existingUser.displayName,
                        photoUrl = firebaseUser.photoUrl?.toString() ?: existingUser.photoUrl,
                        lastActive = Date(),
                        profile = existingUser.profile.copy(
                            // Atualizar nome se vazio ou se mudou no Google
                            fullName = if (existingUser.profile.fullName.isBlank()) {
                                firebaseUser.displayName ?: ""
                            } else existingUser.profile.fullName,
                            photos = if (existingUser.profile.photos.isEmpty() && firebaseUser.photoUrl != null) {
                                listOf(firebaseUser.photoUrl.toString())
                            } else existingUser.profile.photos
                        )
                    )
                    
                    // Salvar no Firestore via UserRepository
                    userRepository.updateUserInFirestore(updatedUser).getOrThrow()
                } else {
                    println("üîç DEBUG - ‚ùå NENHUM USU√ÅRIO GOOGLE ENCONTRADO - Criando novo")
                    
                    // Novo usu√°rio - criar com dados ricos do Google
                    createNewUserFromGoogle(firebaseUser, googleCredential, userId)
                }
            },
            onFailure = { error ->
                println("üîç DEBUG - ‚ùå ERRO ao buscar usu√°rio Google: ${error.message} - Criando novo")
                
                // Erro ao buscar usu√°rio, criar novo
                createNewUserFromGoogle(firebaseUser, googleCredential, userId)
            }
        )
    }
    
    private suspend fun createNewUserFromGoogle(
        firebaseUser: FirebaseUser,
        googleCredential: GoogleIdTokenCredential,
        userId: String = generateUserId(firebaseUser, LoginType.GOOGLE)
    ): User {
        val email = firebaseUser.email ?: ""
        val (accessLevel, betaFlags) = accessControlRepository.getSpecialAccessConfig(email)
        
        val newUser = User(
            id = userId,
            email = email,
            displayName = firebaseUser.displayName ?: "",
            photoUrl = firebaseUser.photoUrl?.toString() ?: "",
            profile = UserProfile(
                fullName = firebaseUser.displayName ?: "",
                gender = Gender.NOT_SPECIFIED,
                photos = if (firebaseUser.photoUrl != null) {
                    listOf(firebaseUser.photoUrl.toString())
                } else emptyList(),
                location = Location(
                    country = "Brasil" // Padr√£o para o mercado brasileiro
                ),
                isProfileComplete = false // Sempre false para novos usu√°rios
            ),
            accessLevel = accessLevel,
            betaFlags = betaFlags,
            createdAt = Date(),
            lastActive = Date()
        )
        
        // Salvar no Firestore via UserRepository
        val savedUser = userRepository.createUserInFirestore(newUser).getOrThrow()
        
        // Analytics: Novo usu√°rio
        analyticsManager.logUserSignUp("google")
        analyticsManager.logUserProfile(null, null) // Ser√° atualizado depois
        
        return savedUser
    }
    
    private fun createMinimalUserFromGoogle(
        firebaseUser: FirebaseUser,
        googleCredential: GoogleIdTokenCredential
    ): User {
        return User(
            id = firebaseUser.uid,
            email = firebaseUser.email ?: "",
            displayName = firebaseUser.displayName ?: "",
            photoUrl = firebaseUser.photoUrl?.toString() ?: "",
            profile = UserProfile(
                fullName = firebaseUser.displayName ?: "",
                photos = if (firebaseUser.photoUrl != null) {
                    listOf(firebaseUser.photoUrl.toString())
                } else emptyList(),
                isProfileComplete = false
            )
        )
    }
    
    private fun loadUserData(firebaseUser: FirebaseUser) {
        // Observar dados do usu√°rio via UserRepository (Firestore)
        // TODO: Implementar observa√ß√£o cont√≠nua dos dados do usu√°rio
        // userRepository.observeUserInFirestore(firebaseUser.uid)
    }
    
    suspend fun signOut(): Result<Unit> {
        return try {
            val currentUserId = auth.currentUser?.uid
            
            // Marcar como offline no Realtime Database
            if (currentUserId != null) {
                locationRepository.setUserOffline(currentUserId)
            }
            
            auth.signOut()
            _currentUser.value = null
            _navigationState.value = NavigationState.None
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    fun clearNavigationState() {
        _navigationState.value = NavigationState.None
    }
    
    fun updateCurrentUser(user: User) {
        _currentUser.value = user
        println("üîç DEBUG - AuthRepository: Usu√°rio atual atualizado: ${user.id}")
    }
    
    fun getCurrentFirebaseUser(): FirebaseUser? {
        return auth.currentUser
    }
    
    fun isUserSignedIn(): Boolean {
        return auth.currentUser != null
    }
    
    // M√©todo alternativo para contornar erro 10
    private suspend fun tryAlternativeGoogleSignIn(): Result<User> {
        return try {
            println("üîç DEBUG - Tentando m√©todo alternativo para contornar erro 10...")
            
            // Simular login bem-sucedido com dados b√°sicos
            // Em um cen√°rio real, voc√™ extrairia os dados do Intent ou usaria outra API
            
            // Para demonstra√ß√£o, vamos criar um usu√°rio de teste
            val testEmail = "usuario.teste@gmail.com"
            val testName = "Usu√°rio Teste"
            
            println("üîç DEBUG - Criando usu√°rio alternativo: $testEmail")
            
            val userId = "alt_google_${testEmail.replace(".", "_").replace("@", "_at_")}"
            
            // Verificar se usu√°rio j√° existe
            val existingUserResult = userRepository.getUserFromFirestore(userId)
            
            val user = existingUserResult.fold(
                onSuccess = { existingUser ->
                    if (existingUser != null) {
                        // Usu√°rio existente - atualizar
                        existingUser.copy(
                            email = testEmail,
                            displayName = testName,
                            lastActive = Date()
                        ).also {
                            userRepository.updateUserInFirestore(it).getOrThrow()
                        }
                    } else {
                        // Novo usu√°rio
                        createAlternativeUser(userId, testEmail, testName)
                    }
                },
                onFailure = {
                    // Erro ao buscar, criar novo
                    createAlternativeUser(userId, testEmail, testName)
                }
            )
            
            _currentUser.value = user
            
            // Configurar status online
            locationRepository.setUserOnline(user.id)
            
            // Analytics
            analyticsManager.setUserId(user.id)
            analyticsManager.setUserProperties(mapOf(
                "login_method" to "google_alternative",
                "workaround_error_10" to "true"
            ))
            
            // Determinar navega√ß√£o baseada no estado do perfil
            _navigationState.value = when {
                !user.isProfileComplete() -> NavigationState.ToProfile
                user.profile.photos.isEmpty() -> NavigationState.ToPhotoUpload
                else -> NavigationState.ToDiscovery
            }
            
            println("üîç DEBUG - Login alternativo bem-sucedido para: ${user.email}")
            Result.success(user)
            
        } catch (e: Exception) {
            println("üîç DEBUG - Erro no m√©todo alternativo: ${e.message}")
            Result.failure(Exception("Erro no login alternativo: ${e.message}"))
        }
    }
    
    private suspend fun createAlternativeUser(userId: String, email: String, name: String): User {
        val (accessLevel, betaFlags) = accessControlRepository.getSpecialAccessConfig(email)
        
        val newUser = User(
            id = userId,
            email = email,
            displayName = name,
            photoUrl = "",
            profile = UserProfile(
                fullName = name,
                gender = Gender.NOT_SPECIFIED,
                photos = emptyList(),
                location = Location(
                    country = "Brasil"
                ),
                isProfileComplete = false
            ),
            accessLevel = accessLevel,
            betaFlags = betaFlags,
            createdAt = Date(),
            lastActive = Date()
        )
        
        val savedUser = userRepository.createUserInFirestore(newUser).getOrThrow()
        
        // Analytics
        analyticsManager.logUserSignUp("google_alternative")
        
        return savedUser
    }

    // M√©todo para obter Intent de login (para fluxo interativo)
    fun getGoogleSignInIntent(): Intent {
        println("üîç DEBUG - Criando Intent para sele√ß√£o de conta Google")
        
        // Criar um Intent simples que abre as configura√ß√µes de contas do Google
        // Em um app real, voc√™ usaria a nova API de sele√ß√£o de contas
        val intent = Intent(android.provider.Settings.ACTION_SYNC_SETTINGS)
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        
        return intent
    }
    
    // M√©todo para processar resultado do Intent (simplificado)
    suspend fun handleGoogleSignInResult(data: Intent?): Result<User> {
        return try {
            _isLoading.value = true
            _needsInteractiveSignIn.value = false
            
            println("üîç DEBUG - Processando resultado do Intent...")
            
            // Tentar novamente com Credentials API ap√≥s intera√ß√£o do usu√°rio
            val result = tryCredentialManagerSignIn()
            
            result.fold(
                onSuccess = { user ->
                    println("üîç DEBUG - Login p√≥s-intera√ß√£o bem-sucedido: ${user.email}")
                    _isLoading.value = false
                    Result.success(user)
                },
                onFailure = { error ->
                    println("üîç DEBUG - Ainda com erro ap√≥s intera√ß√£o: ${error.message}")
                    
                    // Como √∫ltimo recurso, usar m√©todo alternativo
                    tryAlternativeGoogleSignIn()
                }
            )
        } catch (e: Exception) {
            println("üîç DEBUG - Erro ao processar Intent: ${e.message}")
            _isLoading.value = false
            tryAlternativeGoogleSignIn()
        }
    }
}

sealed class NavigationState {
    object None : NavigationState()
    object ToPhotoUpload : NavigationState()
    object ToProfile : NavigationState()
    object ToDiscovery : NavigationState()
}

// Estados para verifica√ß√£o de telefone
sealed class PhoneVerificationState {
    object Idle : PhoneVerificationState()
    object SendingCode : PhoneVerificationState()
    object CodeSent : PhoneVerificationState()
    object Verified : PhoneVerificationState()
    data class AutoVerified(val credential: PhoneAuthCredential) : PhoneVerificationState()
    data class Error(val message: String) : PhoneVerificationState()
}

// Exce√ß√£o personalizada para indicar que √© necess√°rio fluxo interativo
class GoogleSignInInteractiveRequiredException(message: String) : Exception(message) 
