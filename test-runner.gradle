/**
 * üß™ SCRIPT DE EXECU√á√ÉO AUTOM√ÅTICA DE TESTES - FypMatch
 * 
 * Este script executa todos os testes do projeto e gera relat√≥rios detalhados.
 * 
 * Uso:
 * ./gradlew runFypMatchTests
 * ./gradlew runFypMatchTestsWithReport
 * ./gradlew runFypMatchTestsContinuous
 */

// Tarefa para executar todos os testes
task runFypMatchTests {
    group = 'FypMatch Tests'
    description = 'Executa todos os testes do FypMatch'
    
    dependsOn 'test'
    
    doLast {
        println """
        
        üß™ ===============================================
        üß™ EXECU√á√ÉO DE TESTES FINALIZADA - FypMatch
        üß™ ===============================================
        
        üìä Relat√≥rios dispon√≠veis em:
        üìÑ app/build/reports/tests/testDebugUnitTest/index.html
        üìä app/build/test-results/testDebugUnitTest/
        
        üéØ Para executar testes espec√≠ficos:
        ./gradlew test --tests "AuthRepositoryTest"
        ./gradlew test --tests "LocationViewModelTest"
        ./gradlew test --tests "ProfileViewModelTest"
        
        """.stripIndent()
    }
}

// Tarefa para executar testes com relat√≥rio detalhado
task runFypMatchTestsWithReport {
    group = 'FypMatch Tests'
    description = 'Executa todos os testes com relat√≥rio detalhado'
    
    dependsOn 'test'
    
    doLast {
        // Gerar relat√≥rio customizado
        def testResultsDir = file("app/build/test-results/testDebugUnitTest")
        def reportsDir = file("app/build/reports/tests/testDebugUnitTest")
        
        if (testResultsDir.exists()) {
            println """
            
            üéâ ===============================================
            üéâ RELAT√ìRIO DE TESTES - FypMatch
            üéâ ===============================================
            
            üìä Resultados dos Testes:
            """.stripIndent()
            
            // Processar arquivos XML de resultado
            testResultsDir.listFiles().findAll { it.name.endsWith('.xml') }.each { file ->
                def xml = new XmlSlurper().parse(file)
                def testSuite = xml.@name
                def tests = xml.@tests as Integer
                def failures = xml.@failures as Integer
                def errors = xml.@errors as Integer
                def passed = tests - failures - errors
                
                def status = (failures + errors) == 0 ? "‚úÖ" : "‚ùå"
                println "   $status $testSuite: $passed/$tests passou (${failures + errors} falhas)"
            }
            
            println """
            
            üìÑ Relat√≥rio HTML: file://${reportsDir.absolutePath}/index.html
            üìä Resultados XML: ${testResultsDir.absolutePath}
            
            """.stripIndent()
        }
    }
}

// Tarefa para execu√ß√£o cont√≠nua de testes
task runFypMatchTestsContinuous {
    group = 'FypMatch Tests'
    description = 'Executa testes continuamente (watch mode)'
    
    doLast {
        println """
        
        üîÑ ===============================================
        üîÑ MODO CONT√çNUO DE TESTES - FypMatch
        üîÑ ===============================================
        
        Os testes ser√£o executados automaticamente sempre que
        voc√™ modificar arquivos de c√≥digo ou teste.
        
        Para parar, pressione Ctrl+C
        
        """.stripIndent()
        
        // Implementar watch mode seria mais complexo
        // Por enquanto, apenas executar os testes uma vez
        project.tasks.test.execute()
    }
}

// Configura√ß√£o adicional para testes
test {
    // Usar JUnit Platform
    useJUnitPlatform()
    
    // Configura√ß√µes de mem√≥ria
    maxHeapSize = "2g"
    jvmArgs '-XX:MaxPermSize=512m'
    
    // Configura√ß√µes de relat√≥rio
    reports {
        html.enabled = true
        junitXml.enabled = true
    }
    
    // Configura√ß√µes de logging
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        
        // Mostrar resultados detalhados
        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    
    // Executar em paralelo para melhor performance
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    
    // Configura√ß√µes espec√≠ficas do FypMatch
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    
    // Vari√°veis de ambiente para testes
    environment 'FYPMATCH_TEST_MODE', 'true'
    environment 'FIREBASE_TEST_MODE', 'true'
}

// Tarefa para limpar e executar testes
task cleanAndTest {
    group = 'FypMatch Tests'
    description = 'Limpa o projeto e executa todos os testes'
    
    dependsOn 'clean', 'test'
    
    tasks.findByName('test').mustRunAfter 'clean'
}

// Tarefa para executar apenas testes r√°pidos
task runFastTests {
    group = 'FypMatch Tests'
    description = 'Executa apenas testes r√°pidos (unit tests)'
    
    doLast {
        project.tasks.test.include '**/auth/**Test.class'
        project.tasks.test.include '**/profile/**Test.class'
        project.tasks.test.exclude '**/integration/**Test.class'
        project.tasks.test.execute()
    }
}

// Tarefa para executar testes de integra√ß√£o
task runIntegrationTests {
    group = 'FypMatch Tests'
    description = 'Executa testes de integra√ß√£o'
    
    doLast {
        project.tasks.test.include '**/integration/**Test.class'
        project.tasks.test.execute()
    }
}

// Configura√ß√£o para executar testes automaticamente ap√≥s build
build.finalizedBy runFypMatchTests

// Adicionar informa√ß√µes √∫teis
task testInfo {
    group = 'FypMatch Tests'
    description = 'Mostra informa√ß√µes sobre os testes dispon√≠veis'
    
    doLast {
        println """
        
        üß™ ===============================================
        üß™ INFORMA√á√ïES DE TESTES - FypMatch
        üß™ ===============================================
        
        üìã Categorias de Testes Dispon√≠veis:
        
        üîê Autentica√ß√£o:
           - AuthRepositoryTest
           - LoginViewModelTest
           - GoogleSignInTest
           - EmailSignInTest
           - PhoneSignInTest
        
        üë§ Perfil:
           - ProfileViewModelTest
           - ProfileRepositoryTest
           - UserRepositoryTest
        
        üìç Localiza√ß√£o:
           - LocationViewModelTest
           - LocationRepositoryTest
           - LocationServiceTest
           - LocationManagerTest
           - DistanceCalculationTest
        
        üéØ Comandos √öteis:
        
        ./gradlew runFypMatchTests              # Todos os testes
        ./gradlew runFypMatchTestsWithReport    # Com relat√≥rio detalhado
        ./gradlew runFastTests                  # Apenas testes r√°pidos
        ./gradlew runIntegrationTests           # Testes de integra√ß√£o
        ./gradlew cleanAndTest                  # Limpar e testar
        
        ./gradlew test --tests "AuthRepositoryTest"     # Teste espec√≠fico
        ./gradlew test --tests "*Location*"            # Testes de localiza√ß√£o
        ./gradlew test --continuous                     # Modo cont√≠nuo
        
        üìä Relat√≥rios:
        - HTML: app/build/reports/tests/testDebugUnitTest/index.html
        - XML:  app/build/test-results/testDebugUnitTest/
        - Logs: app/build/reports/tests/testDebugUnitTest/classes/
        
        """.stripIndent()
    }
} 